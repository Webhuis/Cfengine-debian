#######################################################
#
# Redmine #4791: body perms mode
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent test
{
  vars:
    freebsd|solaris::
      "modes" slist => { "1", "333", "100", "200", "777" };
    !freebsd.!solaris::
      "modes" slist => { "1", "333", "100", "200", "777", "1111", "1010", "13400", "22222" };

  files:
      "$(G.testdir)/$(modes)"
      create => "true",
      perms => test_mode($(modes));
}

body perms test_mode(m)
{
      mode => "$(m)";
}

bundle agent check
{
  vars:
      "modes" slist => { @(test.modes) };
    windows::
      "win_r" string => "100444";
      "win_w" string => "100666";
      "expected" data => parsejson('
{
  "1": "$(win_r)",
  "333": "$(win_w)",
  "100": "$(win_r)",
  "200": "$(win_w)",
  "777": "$(win_w)",
  "1111": "$(win_r)",
  "1010": "$(win_r)",
  "13400": "$(win_r)",
  "22222": "$(win_r)",
}');

    freebsd|solaris::
      "expected" data => parsejson('
{
  "1": "100001",
  "333": "100333",
  "100": "100100",
  "200": "100200",
  "777": "100777",
}');

    !freebsd.!solaris.!windows::
      "expected" data => parsejson('
{
  "1": "100001",
  "333": "100333",
  "100": "100100",
  "200": "100200",
  "777": "100777",
  "1111": "101111",
  "1010": "101010",
  "13400": "103400",
  "22222": "102222",
}');

    any::
      "actual[$(modes)]" string => filestat("$(G.testdir)/$(modes)", "modeoct");

  classes:
      "ok_$(modes)" expression => strcmp("$(expected[$(modes)])", "$(actual[$(modes)])");

      freebsd|solaris::
      "ok" and => { "ok_1", "ok_333", "ok_100", "ok_200", "ok_777" };

      !freebsd.!solaris::
      "ok" and => { "ok_1", "ok_333", "ok_100", "ok_200", "ok_777", "ok_1111", "ok_1010", "ok_13400", "ok_22222" };

  reports:
    DEBUG::
      "Permission $(modes) worked, got $(expected[$(modes)])" ifvarclass => "ok_$(modes)";
      "Permission $(modes) failed, expected $(expected[$(modes)]) != actual $(actual[$(modes)])" ifvarclass => "!ok_$(modes)";
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

### PROJECT_ID: core
### CATEGORY_ID: 27
