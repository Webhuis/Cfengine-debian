#######################################################
#
# Test dirname()
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}


bundle agent init
{
  vars:
      "dummy" string => "dummy";
}

#######################################################

bundle agent test
{
  meta:
      "test_suppress_fail" string => "windows",
        meta => { "redmine4716" };


  vars:
      "p[root]" string => translatepath("/");
      "d[root]" string => translatepath("/");

      "p[simple]" string => translatepath("/foo/bar");
      "d[simple]" string => translatepath("/foo");

      "p[slash]" string => translatepath("/foo/bar/");
      "d[slash]" string => translatepath("/foo");

      "p[sub]" string => translatepath("/foo");
      "d[sub]" string => translatepath("/");

      "p[subslash]" string => translatepath("/foo/");
      "d[subslash]" string => translatepath("/");

      "p[multi]" string => translatepath("/foo/bar/baz");
      "d[multi]" string => translatepath("/foo/bar");

      "p[multislash]" string => translatepath("/foo/bar/baz/");
      "d[multislash]" string => translatepath("/foo/bar");

      "p[more]" string => translatepath("/a/b/c/d/e/f/g/h/i");
      "d[more]" string => translatepath("/a/b/c/d/e/f/g/h");

      "keys" slist => getindices("p");

      "b[$(keys)]" string => dirname("$(p[$(keys)])");
}

#######################################################

bundle agent check
{
  vars:
      "keys" slist => { @(test.keys) };

  classes:
      "failed_cmp_$(keys)" not => strcmp(dirname("$(test.p[$(keys)])"), "$(test.d[$(keys)])");
      "ok" not => classmatch("failed_cmp_.*");

  reports:
    DEBUG::
      "'dirname($(test.p[$(keys)]))' = '$(test.b[$(keys)])' =?= '$(test.d[$(keys)])'";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}


