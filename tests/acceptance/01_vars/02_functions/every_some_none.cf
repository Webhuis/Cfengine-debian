#######################################################
#
# Test every(), some(), and none()
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "results" slist => {
                           "starting list = 1",
                           "starting list = 2",
                           "starting list = 3",
                           "starting list = one",
                           "starting list = two",
                           "starting list = three",
                           "starting list = long string",
                           "starting list = four",
                           "starting list = fix",
                           "starting list = six",
                           "starting list = one",
                           "starting list = two",
                           "starting list = three",
                           "every() test 1 passed",
                           "every() test 2 passed",
                           "every() test d11 passed",
                           "every() test d12 passed",
                           "every() test d21 passed",
                           "every() test d22 passed",
                           "none() dempty test passed",
                           "none() test 1 passed",
                           "none() test 2 passed",
                           "none() test d11 passed",
                           "none() test d12 passed",
                           "none() test d21 passed",
                           "none() test d22 passed",
                           "some() dempty test passed",
                           "some() test 1 passed",
                           "some() test 2 passed",
                           "some() test d11 passed",
                           "some() test d12 passed",
                           "some() test d21 passed",
                           "some() test d22 passed",
                           "every() dempty test passed",
                           "every() empty test passed",
                           "some() empty test passed",
                           "none() empty test passed",
      };

  files:
      "$(G.testfile).expected"
      create => "true",
      edit_defaults => init_empty,
      edit_line => init_insert;
}

body edit_defaults init_empty
{
      empty_file_before_editing => "true";
      edit_backup => "false";
}

bundle edit_line init_insert
{
  insert_lines:
      "$(init.results)";
}

#######################################################

bundle common testaide
{
  vars:
      "test" slist => {
                        1,2,3,
                        "one", "two", "three",
                        "long string",
                        "four", "fix", "six",
                        "one", "two", "three",
      };

      "empty" slist => { };

      "d1" data => parsejson('
[1,2,3,
 "one", "two", "three",
 "long string",
 "four", "fix", "six",
 "one", "two", "three"]');

      "d2" data => parsejson('
{ "one": 1, "two": 2, "three": 3,
  "x": "y", "a": "b", "p": "q" }');

      "dempty" data => parsejson('[]');

  classes:
      "every1" expression => every(".*", "test");
      "every2" expression => every(".", "test");

      "some1" expression => some("long string", "test");
      "some2" expression => some("none", "test");

      "none1" expression => none("jebadiah", "test");
      "none2" expression => none("2", "test");

      "every_empty" expression => every(".*", "empty");
      "some_empty" expression => some(".*", "empty");
      "none_empty" expression => none(".*", "empty");

      "everyd11" expression => every(".*", d1);
      "everyd12" expression => every(".", d1);

      "somed11" expression => some("long string", d1);
      "somed12" expression => some("none", d1);

      "noned11" expression => none("jebadiah", d1);
      "noned12" expression => none("2", d1);

      "everyd21" expression => every(".*", d2);
      "everyd22" expression => every(".", d2);

      "somed21" expression => some("long string", d2);
      "somed22" expression => some("none", d2);

      "noned21" expression => none("jebadiah", d2);
      "noned22" expression => none("2", d2);

      "every_dempty" expression => every(".*", dempty);
      "some_dempty" expression => some(".*", dempty);
      "none_dempty" expression => none(".*", dempty);
}

bundle agent test
{
  files:
      "$(G.testfile).actual"
      create => "true",
      edit_line => test_insert;
}

bundle edit_line test_insert
{
  insert_lines:
      "starting list = $(testaide.test)";
    every1::
      "every() test 1 passed";
    !every1::
      "every() test 1 failed";
    every2::
      "every() test 2 failed";
    !every2::
      "every() test 2 passed";
    some1::
      "some() test 1 passed";
    !some1::
      "some() test 1 failed";
    some2::
      "some() test 2 failed";
    !some2::
      "some() test 2 passed";
    none1::
      "none() test 1 passed";
    !none1::
      "none() test 1 failed";
    none2::
      "none() test 2 failed";
    !none2::
      "none() test 2 passed";
    !every_empty::
      "every() empty test passed";
    !some_empty::
      "some() empty test passed";
    none_empty::
      "none() empty test passed";
    everyd11::
      "every() test d11 passed";
    !everyd11::
      "every() test d11 failed";
    everyd12::
      "every() test d12 failed";
    !everyd12::
      "every() test d12 passed";
    somed11::
      "some() test d11 passed";
    !somed11::
      "some() test d11 failed";
    somed12::
      "some() test d12 failed";
    !somed12::
      "some() test d12 passed";
    noned11::
      "none() test d11 passed";
    !noned11::
      "none() test d11 failed";
    noned12::
      "none() test d12 failed";
    !noned12::
      "none() test d12 passed";
    everyd21::
      "every() test d21 passed";
    !everyd21::
      "every() test d21 failed";
    everyd22::
      "every() test d22 passed";
    !everyd22::
      "every() test d22 failed";
    somed21::
      "some() test d21 failed";
    !somed21::
      "some() test d21 passed";
    somed22::
      "some() test d22 failed";
    !somed22::
      "some() test d22 passed";
    noned21::
      "none() test d21 passed";
    !noned21::
      "none() test d21 failed";
    noned22::
      "none() test d22 failed";
    !noned22::
      "none() test d22 passed";
    !every_dempty::
      "every() dempty test passed";
    !some_dempty::
      "some() dempty test passed";
    none_dempty::
      "none() dempty test passed";
}

#######################################################

bundle agent check
{
  methods:
      "any" usebundle => sorted_check_diff("$(G.testfile).actual",
                                           "$(G.testfile).expected",
                                           "$(this.promise_filename)");
}
